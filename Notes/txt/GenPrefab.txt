PrefabGenerator{
    
    static void InitData{
        string lang = GetLangSetting();
        _sharePrefabPath = Path.Combine("Assets", Path.Combine(EDIT_GUI_PATH, PANELS_FOLDER_NAME)).Replace('\\', '/') + "/" + SHARED_NAME + ".prefab";
        _l10nPrefabPath = Path.Combine("Assets", Path.Combine(EDIT_GUI_PATH, PANELS_FOLDER_NAME)).Replace('\\', '/') + "/" + L10N_NAME + ".prefab";
        _editPanelsAssetPath = Path.Combine("Assets", Path.Combine(EDIT_GUI_PATH, PANELS_FOLDER_NAME)).Replace('\\', '/');
        _editSpritesAssetPath = Path.Combine("Assets", Path.Combine(EDIT_GUI_PATH, SPRITES_FOLDER_NAME)).Replace('\\', '/');
        _resourceGUIAssetPath = Path.Combine("Assets", RESOURCES_GUI_PATH).Replace('\\', '/') + "/" + lang;
        _editPanelsFullPath = Path.Combine(Application.dataPath, Path.Combine(EDIT_GUI_PATH, PANELS_FOLDER_NAME)).Replace('\\', '/');
        _editSpritesFullPath = Path.Combine(Application.dataPath, Path.Combine(EDIT_GUI_PATH, SPRITES_FOLDER_NAME)).Replace('\\', '/');
        
        _resourceGUIFullPath = Path.Combine(Application.dataPath, RESOURCES_GUI_PATH).Replace('\\', '/') + "/" + lang;
        GetPanelSetting();
        ///////////////////////////////////////
        /*
            static string EDIT_GUI_PATH = "EditData/GUI";
            static string RESOURCES_GUI_PATH = "Resources/GUI";
            static string PANELS_FOLDER_NAME = "Panels";
            static string SPRITES_FOLDER_NAME = "Sprites";
            static string PANEL_SETTING_FULL_NAME = "EditData/GUI/BatchSetting.json";
            private const string SHARED_NAME = "GUI_Shared";
            private const string L10N_NAME = "GUI_L10n";

            lang = "cn"
            _sharePrefabPath = "Assets/EditData/GUI/Panels/GUI_Shared.prefab"
            _l10nPrefabPath = "Assets/EditData/GUI/Panels/GUI_L10n.prefab"
            _editPanelsAssetPath = "Assets/EditData/GUI/Panels"
            _editSpritesAssetPath = "Assets/EditData/GUI/Sprites""
            _resourceGUIAssetPath = "Assets/Resources/GUI/cn"

            _editPanelsFullPath = "F:...Assets/EditData/GUI/Panels"
            _editSpritesFullPath = "F:...Assets/EditData/GUI/Sprites"
            _resourceGUIFullPath = "F:...Assets/Resources/GUI/cn"
        */
    }
    
    static List<List<string>> _panelSetting = new List<List<string>>();
    //读取BatchSetting.json文件至_panelSetting
    public static void GetPanelSetting(){
        _panelSetting.Clear();
        var fullPath = Path.Combine(Application.dataPath, PANEL_SETTING_FULL_NAME).Replace('\\', '/');
        //fullPath = "F:../Assets/EditData/GUI/BatchSetting.json"
        string jsonContent = File.ReadAllText(fullPath, Encoding.UTF8);

        JsonData data = JsonMapper.ToObject(jsonContent);
        var setting = data["setting"];
        if (setting.IsArray && setting.Count > 0)
        {
            for (int i = 0; i < setting.Count; i++)
            {
                var value = setting[i];
                if (value.IsArray && value.Count > 0)
                {
                    //StringBuilder str = new StringBuilder();
                    List<string> subData = new List<string>();
                    for (int j = 0; j < value.Count; j++)
                    {
                        //str.Append(value[j] + ",");
                        subData.Add(value[j].ToString());
                    }
                    _panelSetting.Add(subData);
                }
            }
        }
    }

    private static void GetShareAndL10nResourceMd5Info(Dictionary<string, string> dic)
    {
        //_sharePrefabPath = "Assets/EditData/GUI/Panels/GUI_Shared.prefab"
        //_l10nPrefabPath = "Assets/EditData/GUI/Panels/GUI_L10n.prefab"
        //获得所有的依赖项资源，只处理png，用两个Prefab的依赖png路径生成md5码加到dic中
        string[] dependencies = AssetDatabase.GetDependencies(_sharePrefabPath);
        string[] l10nDependencies = AssetDatabase.GetDependencies(_l10nPrefabPath);

        for (int j = 0; j < dependencies.Length; j++)
        {
            string depPath = dependencies[j];
            if (Path.GetExtension(depPath) == ".png")
            {
                var md5 = MD5Utils.BuildFileMd5(depPath);
                if (dic.ContainsKey(md5))
                {
                    Debug.LogError("share has same png name ====" + depPath);
                    Debug.LogError("==" + dic[md5]);
                }
                else
                {
                    dic.Add(md5, depPath);
                }

            }
        }

        for (int i = 0; i < l10nDependencies.Length; i++)
        {
            string depPath = l10nDependencies[i];
            //Debug.LogError("depPath =====" + depPath);
            if (Path.GetExtension(depPath) == ".png")
            {
                var md5 = MD5Utils.BuildFileMd5(depPath);
                if (dic.ContainsKey(md5))
                {
                    Debug.LogError("l10n has same png name ====" + depPath);
                    Debug.LogError("==" + dic[md5]);
                }
                else
                {
                    dic.Add(md5, depPath);
                }

            }
        }
    }
    //获得选中的Panel.prefab,用路径来过滤
    static List<string> GetSelectedPaths()
    {
        List<string> result = new List<string>();
        Object[] selectedList = Selection.GetFiltered(typeof(Object), SelectionMode.Assets);
        for (int i = 0; i < selectedList.Length; i++)
        {
            var obj = selectedList[i];
            string path = AssetDatabase.GetAssetPath(obj);
            if (!path.Contains(_editPanelsAssetPath) == true)
            {
                continue;
            }
            result.Add(path);
        }
        return result;
    }

    //疑问：AssetDatabase.GetAssetPath怎么保证先找到的是公共资源，根据文件生成md5,同个文件无论放哪里生成的md5都一样
    private static Sprite HandleSprite(Sprite sprite, ImageWrapper img, Dictionary<string, string> resourceMd5Dic)
    {
        Sprite s = null;
        if (sprite == null)
        {
            return s;
        }
        var spritePath = AssetDatabase.GetAssetPath(sprite);
        //Debug.LogError("路径====" + spritePath);
        var md5 = MD5Utils.BuildFileMd5(spritePath);
        if (resourceMd5Dic.ContainsKey(md5))
        {
            s = AssetDatabase.LoadAssetAtPath<Sprite>(resourceMd5Dic[md5]);
        }
        return s;
    }

    public static void ArrangePrefabResource()
    {
        var sb = new StringBuilder();
        InitData();

        List<string> selectedList = GetSelectedPaths();
        List<string> dependenciesNameList = new List<string>();
        List<string> spritesNameList = new List<string>();

        //Shared L10n 相关md5码
        Dictionary<string, string> resourceMd5Dic = new Dictionary<string, string>();
        GetShareAndL10nResourceMd5Info(resourceMd5Dic);

        //循环处理每一个prefab
        for (int i = 0; i < selectedList.Count; i++)
        {
            string path = selectedList[i];
            string ex = Path.GetExtension(path);
            if (ex == ".prefab")
            {
                //eg:Panel_Character
                string panelName = Path.GetFileNameWithoutExtension(path);
                //eg:Panel_Character.prefab对象
                GameObject go = AssetDatabase.LoadAssetAtPath<GameObject>(path);

                //eg:获得Panel_Character.prefab所有子物体的ImageWrapper组件
                ImageWrapper[] list = go.GetComponentsInChildren<ImageWrapper>(true);
                foreach (ImageWrapper img in list)
                {
                    if (img.sprite != null && img.sprite.name != "UISprite")
                    {
                        var spritePath = AssetDatabase.GetAssetPath(img.sprite);
                        var file = new FileInfo(spritePath);
                        var spritePanelName = file.Directory.Name;
                        sb.AppendLine("处理的资源panel名称====" + spritePath);    
                        //处理Image的Selectable组件，如果有。检查公共资源是否有这些资源，有的话用公共资源的。
                        Selectable selectable = img.gameObject.GetComponent<Selectable>();
                        if (selectable != null && selectable.transition == Selectable.Transition.SpriteSwap)
                        {
                            SpriteState spriteState = selectable.spriteState;
                            var sH = HandleSprite(spriteState.highlightedSprite, img, resourceMd5Dic);
                            if(sH != null)
                            {
                                spriteState.highlightedSprite = sH;
                            }
                            var sP = HandleSprite(spriteState.pressedSprite, img, resourceMd5Dic);
                            if(sP != null)
                            {
                                spriteState.pressedSprite = sP;
                            }
                            var sD = HandleSprite(spriteState.disabledSprite, img, resourceMd5Dic);
                            if(sD != null)
                            {
                                spriteState.disabledSprite = sD;
                            }
                            selectable.spriteState = spriteState;
                        }

                        if (spritePanelName != SHARED_NAME && spritePanelName != L10N_NAME)
                        {
                            var s = HandleSprite(img.sprite, img, resourceMd5Dic);
                            if (s != null)
                            {
                                img.sprite = s;
                                continue;
                            }
                        }                               
             
                        if (spritePanelName != SHARED_NAME && spritePanelName != L10N_NAME && spritePanelName != panelName)
                        {                            
                            var dest = string.Concat(_editSpritesAssetPath, "/", panelName);
                            if (!Directory.Exists(dest))
                            {
                                Directory.CreateDirectory(dest);
                            }
                            var destFileName = string.Concat(_editSpritesAssetPath, "/", panelName, "/", img.sprite.name, Path.GetExtension(spritePath));
                            if (!File.Exists(destFileName))
                            {
                                //sb.AppendLine("destFileName-=====" + destFileName);
                                AssetDatabase.CopyAsset(spritePath, destFileName);
                            }
                            img.sprite = AssetDatabase.LoadAssetAtPath<Sprite>(destFileName);
                            sb.AppendLine("修改指向的资源名称-=====" + destFileName);
                            //break;
                        }
                    }

                }
                EditorUtility.SetDirty(go);
            }
            AssetDatabase.SaveAssets();
        }
        File.WriteAllText("ArrangePrefabResource.txt", sb.ToString());
        AssetDatabase.Refresh(ImportAssetOptions.ForceUpdate);
        AssetDatabase.SaveAssets();
    }

    private static Dictionary<string, Object[]> _atlasDict;
    public static void ResetAssetDict()
    {
        _atlasDict = new Dictionary<string, Object[]>();
    }
    //根据Panel_Name,获得 BatchSetting.json的主Panel_Name
    static string GetMainPanelName(string panelName)
    {
        if (_panelSetting != null && _panelSetting.Count > 0)
        {
            for (int i = 0; i < _panelSetting.Count; i++)
            {
                if (_panelSetting[i].Contains(panelName))
                {
                    return _panelSetting[i][0];
                }
            }
        }
        return null;
    }
    // the final step
    static void GeneratePrefabByPrefab(string path)
    {
        //Panel_Character.prefab
        string fileName = Path.GetFileName(path);
        
        //Panel_Character
        string panelName = Path.GetFileNameWithoutExtension(path);

        //"F:...Assets/Resources/GUI/cn/Panel_Character"
        string newFolderPath = Path.Combine(_resourceGUIFullPath, panelName).Replace('\\', '/');

        //获得 BatchSetting.json所属的第一个元素，如果有
        string mainPanelPath = null;
        List<string> mainPanelSettingContent = GetPanelSettingContent(panelName);
        string mainPanelName = mainPanelSettingContent == null ? null : mainPanelSettingContent[0];

        if (mainPanelName != null)
        {
            //mainPanelPath = string.Format("{0}/{1}/{2}", _resourceGUIAssetPath, mainPanelName, path.Replace(fileName, mainPanelName));
            //"Assets/Resources/GUI/cn/Panel_Character"
            mainPanelPath = string.Format("{0}/{1}/", _resourceGUIAssetPath, mainPanelName);
        }
        
        //"F:...Assets/EditData/GUI/Sprites/Panel_Character"
        string editSpritePath = Path.Combine(_editSpritesFullPath, panelName).Replace('\\', '/');
        //"Assets/EditData/GUI/Sprites/Panel_Character"
        editSpritePath = TransFullPathToAssetPath(editSpritePath);

        int qualitySetting = GetFolderQualitySetting(editSpritePath);//生成图集质量

        bool etc = false;
        if (qualitySetting == QUALITY_ETC) etc = true;
        int padding = GetFolderPaddingSetting(editSpritePath);//同GetFolderQualitySetting，默认2
        //if (!etc) padding = 1;
        bool forceSquare = false;

        //"F:...Assets/Resources/GUI/cn/Panel_Character"
        if (!Directory.Exists(newFolderPath))
            Directory.CreateDirectory(newFolderPath);
        //"Assets/Resources/GUI/cn/Panel_Character/Panel_Character.prefab"
        string newPath = string.Format("{0}/{1}/{2}", _resourceGUIAssetPath, panelName, fileName);

        //"Assets/Resources/GUI/cn/Panel_Character/Panel_Character.prefab.meta"
        string metaPath = newPath + ".meta";
        //"Assets/Resources/GUI/cn/Panel_Character/Panel_Character.prefab.meta.Bak"
        string metaBakPath = newPath + ".meta.Bak";

        if (File.Exists(metaBakPath)) File.Delete(metaBakPath);//删除.Bak文件，如果有
        if (File.Exists(metaPath)) File.Copy(metaPath, metaBakPath);//如果有.meta文件，复制到.Bak文件
        AssetDatabase.DeleteAsset(newPath);
        AssetDatabase.Refresh();
        //bool copyResult = AssetDatabase.CopyAsset(path, newPath);
        File.Copy(path, newPath);//将EditData的prefab复制到Resources
        if (File.Exists(newPath))
        {
            AssetDatabase.SaveAssets();
            AssetDatabase.Refresh();
            if (mainPanelPath != null)//处理在 BatchSetting.json 配置的Panel
            {
                DeletePng(newFolderPath, panelName, mainPanelSettingContent);
                PanelAtlasGenerator.GenerateAtlasByPanels(_editPanelsAssetPath, _resourceGUIAssetPath, mainPanelSettingContent, mainPanelName, forceSquare, etc, padding);
            }
            else//处理在 BatchSetting.json没有配置的Panel
            {
                PanelAtlasGenerator.GenerateAtlas(newPath, forceSquare, etc, padding);
            }
            ChangeDependencies(panelName, newPath);
        }
        if (File.Exists(metaPath)) File.Delete(metaPath);
        if (File.Exists(metaBakPath)) File.Copy(metaBakPath, metaPath);
        if (File.Exists(metaBakPath)) File.Delete(metaBakPath);
    }

    private const int QUALITY_ETC = 0;
    private const int QUALITY_TURE_COLOR = 1;
    private const int QUALITY_PVRTC4 = 2;
    private static int GetFolderQualitySetting(string folderPath)
    {
        TextAsset jsonAsset = AssetDatabase.LoadAssetAtPath(folderPath + "/_QualitySetting.json", typeof(TextAsset)) as TextAsset;
        if (jsonAsset == null)
        {
            return QUALITY_ETC; //Ari：目前默认是真彩色，后面正式上线要做好ETC分离调整
        }
        JsonData jsonData = JsonMapper.ToObject(jsonAsset.text);
        if (!jsonData.Keys.Contains("quality")) return QUALITY_ETC;
        return (int)jsonData["quality"];
    }

    //处理资源的Main方法
    public static void GenerateResourcesPrefab(){
        InitData();
        ArrangePrefabResource();

        ResetAssetDict();

        //循环处理每个prefab
        List<string> selectedList = GetSelectedPaths();
        for (int i = 0; i < selectedList.Count; i++)
        {
            string path = selectedList[i];
            string ex = Path.GetExtension(path);
            if (ex == ".prefab")
            {
                string mainPanelPath = null;
                string mainPanelName = GetMainPanelName(path);
                if (mainPanelName != null)
                {//切换生成目标
                    mainPanelPath = path.Replace(Path.GetFileName(path), mainPanelName);
                }
                GeneratePrefabByPrefab(path);
            }
            else
                //如果是文件夹，处理文件夹里的prefab
                if (ex == string.Empty)
                {
                    GeneratePrefabByFolder(path);
                }
        }
    }

    //这里删除的应该是 BatchSetting.json里非主Panel的其他Panel的png
    //path=newFolderPath://"F:...Assets/Resources/GUI/cn/Panel_Character"
    //panelName://Panel_Character
    //names://BatchSetting.json里的包含panelName的数组
    //假如 BatchSetting.json[Panel_Character, Panel_Demo]
    static void DeletePng(string path, string panelName, List<string> names)
    {
        for (int i = 1; i < names.Count; i++)
        {
            //"F:...Assets/Resources/GUI/cn/Panel_Demo"
            string delPath = path.Replace(panelName, names[i]);
            
            //"F:...Assets/Resources/GUI/cn/Panel_Demo/Panel_Demo.png"
            string pngPath = Path.Combine(delPath, string.Concat(names[i], ".png")).Replace('\\', '/');
            
            //"F:...Assets/Resources/GUI/cn/Panel_Demo/Panel_Demo.png.meta"
            string metaPath = string.Concat(pngPath, ".meta");

            //删除
            if (File.Exists(pngPath)) File.Delete(pngPath);
            if (File.Exists(metaPath)) File.Delete(metaPath);
            
            //"F:...Assets/Resources/GUI/cn/Panel_Demo/Panel_Demo_alpha.png"
            pngPath = Path.Combine(delPath, string.Concat(names[i], "_alpha.png")).Replace('\\', '/');

            //"F:...Assets/Resources/GUI/cn/Panel_Demo/Panel_Demo_alpha.png.meta"
            metaPath = string.Concat(pngPath, ".meta");

            //删除
            if (File.Exists(pngPath)) File.Delete(pngPath);
            if (File.Exists(metaPath)) File.Delete(metaPath);

            //"F:...Assets/Resources/GUI/cn/Panel_Demo/Panel_Demo_etc.mat"
            pngPath = Path.Combine(delPath, string.Concat(names[i], "_etc.mat")).Replace('\\', '/');
            //"F:...Assets/Resources/GUI/cn/Panel_Demo/Panel_Demo_etc.mat.meta"

            //删除
            metaPath = string.Concat(pngPath, ".meta"); 
            if (File.Exists(pngPath)) File.Delete(pngPath);
            if (File.Exists(metaPath)) File.Delete(metaPath);
        }
    }
}

PanelAtlasGenerator{

    public const string SHARED_NAME = "GUI_Shared";
    public const string L10N_NAME = "GUI_L10n";
	private const int MAX_ATLAS_SIZE = 2048;    
	private const int RECOMMEND_ATLAS_SIZE = 1024; 
	public const int BORDER = 2; //带Clamp参数的边缘补2个像素

    //处理配置的Panels
    //panelPath//"Assets/EditData/GUI/Panels"
    //path//"Assets/Resources/GUI/cn"
    //panels//BatchSetting.json配置
    //mainPanelName//panels[0]
    //forceSquare=false
    //etc=false
    //padding=2 or 1
    public static void GenerateAtlasByPanels(string panelPath, string path, List<string> panels, string mainPanelName, bool forceSquare = false, bool etc = false, int padding = 1)
    {
        List<SpriteTexture2DInfo> spritesInfo = new List<SpriteTexture2DInfo>();
        HashSet<string> addNameList = new HashSet<string>();

        //"Assets/Resources/GUI/cn/Panel_Character/Panel_Character.prefab"
        string prefabPath = string.Format("{0}/{1}/{2}.prefab", path, mainPanelName, mainPanelName);

        foreach (string panelName in panels)
        {
            //"Assets/EditData/GUI/Panels/Panel_Character.prefab"
            SetSpritesInfo(string.Format("{0}/{1}.prefab", panelPath, panelName), spritesInfo, addNameList);
        }
        PanelAtlasGenerator.CreateAtlas(spritesInfo, Path.GetDirectoryName(prefabPath), Path.GetFileNameWithoutExtension(prefabPath), forceSquare, etc, padding);
    }

    //spritesInfo
    //"Assets/Resources/GUI/cn/Panel_Character/Panel_Character.prefab"
    //targetPath//"Assets/Resources/GUI/cn/Panel_Character"
    //atlasName:Panel_Character
    //forceSquare:false
    //etc:false
    //padding:1
     public static void CreateAtlas(List<SpriteTexture2DInfo> spritesInfo, string targetPath, string atlasName, bool forceSquare = false, bool etc = false, int padding = 1)
	{
        ClearPngs(targetPath, atlasName);//删除原有的，如果有
        if (spritesInfo.Count == 0)
        {
            return;
        }
		Texture2D atlas = new Texture2D(MAX_ATLAS_SIZE, MAX_ATLAS_SIZE);
		Texture2D[] sprites = new Texture2D[spritesInfo.Count];
		for(int i = 0; i < spritesInfo.Count; i++) {
			sprites[i] = spritesInfo[i].texture;
		}
        Rect[] rects = atlas.PackTextures(sprites, padding, MAX_ATLAS_SIZE, false);
        string path = Path.Combine(targetPath, atlasName + ".png");
        atlas = OptimizeAtlas(atlas, rects, forceSquare);
        if (padding > 1) AppendPixels(rects, atlas);
        bool saveResult = SaveAtlas(atlas, path);
		int atlasWidth = atlas.width;
		int atlasHeight = atlas.height;
		if(atlasWidth > RECOMMEND_ATLAS_SIZE || atlas.height > RECOMMEND_ATLAS_SIZE)
		{
			Debug.Log(string.Format("<color=#ff0000>【错误】图集宽或高超过1024像素: {0} </color>", atlasName));
		}
		else
		{
			Debug.Log(string.Format("<color=#00ff00>图集 {0} 尺寸为： {1}x{2} </color>", atlasName, atlasWidth, atlasHeight));
		}
        if (!saveResult) return; //如果没有进行保存，证明数据没变，不需要重新划分sprite
		ImportAsset(new List<string>() { path });
		CreateSpriteImporter(path, true, TextureImporterFormat.RGBA32);
		ImportAsset(new List<string>() { path });
        CreateMultipleSpriteImporter(spritesInfo, path, rects, atlasWidth, atlasHeight, etc);
		ImportAsset(new List<string>() { path });
        if (etc) { GenerateEtcs(targetPath, atlasName); }
        else {
            Generate565A8(targetPath, atlasName);
        }
	}
    //atlas:生成的图集
    //rects:子图
    //强制
    public static Texture2D OptimizeAtlas(Texture2D atlas, Rect[] rects, bool forceSquare = false)
	{
		Texture2D result = atlas;
		Rect contentRect = GetAtlasContentRect(rects);
		//处理出现超过一半为空的情况
        for (float i = 0.125f; i <= 0.5f; i = i * 2f)
        {
            if (contentRect.width <= i)
            {
                result = CreateResizedAtlas(result, i, 1.0f, rects);
                break;
            }
        }
        for (float i = 0.125f; i <= 0.5f; i = i * 2f)
        {
            if (contentRect.height <= i)
            {
                result = CreateResizedAtlas(result, 1.0f, i, rects);
                break;
            }
        }
		if(forceSquare == true)
		{
            if (result.width > result.height)
			{
                result = CreateResizedAtlas(result, 1.0f, 2.0f, rects);
			}
            else if (result.width < result.height)
			{
                result = CreateResizedAtlas(result, 2.0f, 1.0f, rects);
			}
		}
		return result;
	}

    //targetPath//"Assets/Resources/GUI/cn/Panel_Character"
    //atlasName:Panel_Character
    private static void ClearPngs(string targetPath, string atlasName)
	{
        string path = Path.Combine(targetPath, atlasName);
        string pngPath = Application.dataPath + path.Replace("Assets", "") +".png";
        string pngAlphaPath = Application.dataPath + path.Replace("Assets", "") + "_alpha.png";
        string matPath = Application.dataPath + path.Replace("Assets", "") + "_etc.mat";        
        if (File.Exists(pngPath))
        {
            File.Delete(pngPath);
        }
        if (File.Exists(pngAlphaPath))
        {
            File.Delete(pngAlphaPath);
        }
        if (File.Exists(matPath))
        {
            File.Delete(matPath);
        }
	}

    //"Assets/EditData/GUI/Panels/Panel_Character.prefab"
    //empty spritesInfo
    //empty addNameList
    private static void SetSpritesInfo(string prefabPath, List<SpriteTexture2DInfo> spritesInfo, HashSet<string> addNameList = null)
    {
        GameObject newPrefab = AssetDatabase.LoadAssetAtPath(prefabPath, typeof(GameObject)) as GameObject;
        if (newPrefab == null)
        {
            Debug.LogError("newPrefab is null : " + prefabPath);
            return;
        }
        string[] dependencies = AssetDatabase.GetDependencies(prefabPath);

        for (int i = 0; i < dependencies.Length; i++)
        {
            string depPath = dependencies[i];
            string spriteName = Path.GetFileNameWithoutExtension(depPath);
            if (Path.GetExtension(depPath) == ".png")//处理png
            {
                //检查目录
                if (Path.GetDirectoryName(depPath).IndexOf("EditData/GUI/Sprites") < 0)
                {
                    //throw new ArgumentException("sprite ，目录引用错误：", depPath);
                    Debug.LogError("SetSpritesInfo: sprite Error :" + prefabPath + ":" + spriteName + ":" + depPath);
                    continue;
                }
                if (Path.GetDirectoryName(depPath).EndsWith("/" + SHARED_NAME) && newPrefab.name != SHARED_NAME)
                {
                    continue;
                }
                if (Path.GetDirectoryName(depPath).EndsWith("/" + L10N_NAME) && newPrefab.name != L10N_NAME)
                {
                    continue;
                }
                //
                if (addNameList != null && addNameList.Contains(spriteName))
                {
                    continue;
                }

                var textureImporter = TextureImporter.GetAtPath(depPath) as TextureImporter;                

                var spritesheet = textureImporter.spritesheet;
                if (textureImporter.textureType != TextureImporterType.Advanced || !textureImporter.isReadable
                    || textureImporter.textureFormat != TextureImporterFormat.AutomaticTruecolor)
                {
                    textureImporter.textureType = TextureImporterType.Advanced;
                    textureImporter.isReadable = true;
                    textureImporter.textureFormat = TextureImporterFormat.AutomaticTruecolor;
                    AssetDatabase.ImportAsset(depPath);
                    AssetDatabase.Refresh();
                }
                var texture2d = AssetDatabase.LoadAssetAtPath<Texture2D>(depPath);
                SpriteTexture2DInfo info = new SpriteTexture2DInfo();
                info.textureImporter = textureImporter;
                info.texture = texture2d;
                spritesInfo.Add(info);
                if (addNameList != null)
                {
                    addNameList.Add(spriteName);
                }                
            }
        }
    }

    private static Rect GetAtlasContentRect(Rect[] rects)
	{
		Rect contentRect = new Rect(0, 0, 0, 0);
		for(int i = 0; i < rects.Length; i++)
		{
			Rect rect = rects[i];
			if(rect.xMin < contentRect.xMin)
			{
				contentRect.xMin = rect.xMin;
			}
			if(rect.yMin < contentRect.yMin)
			{
				contentRect.yMin = rect.yMin;
			}
			if(rect.xMax > contentRect.xMax)
			{
				contentRect.xMax = rect.xMax;
			}
			if(rect.yMax > contentRect.yMax)
			{
				contentRect.yMax = rect.yMax;
			}
		}
		return contentRect;
	}
}

//官方文档，详细描述
SpriteTexture2DInfo
{
    public Texture2D texture;
    public TextureImporter textureImporter;
}